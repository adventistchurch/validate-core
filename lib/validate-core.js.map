{"version":3,"file":"validate-core.js","sources":["../src/regexp.js","../src/utils.js","../src/validators/datetime.js","../src/validators/date.js","../src/validators/email.js","../src/validators/equality.js","../src/validators/exclusion.js","../src/validators/format.js","../src/validators/inclusion.js","../src/validators/length.js","../src/validators/numericality.js","../src/validators/presence.js","../src/validators/type.js","../src/validators/url.js","../src/validators/index.js","../src/validate.js"],"sourcesContent":["export default {\n  EMPTY_STRING: /^\\s*$/,\n\n  EMAIL: /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i, // eslint-disable-line no-control-regex\n\n  FORMAT_REGEXP: /(%?)%\\{([^}]+)\\}/g,\n\n  PHONE_US: /^\\D?(\\d{3})\\D?\\D?(\\d{3})\\D?(\\d{4})$/,\n\n  URL: ({ allowLocal, schemes }) => {\n    let regexp =\n      '^' +\n      // protocol identifier\n      '(?:(?:' +\n      schemes.join('|') +\n      ')://)' +\n      // user:pass authentication\n      '(?:\\\\S+(?::\\\\S*)?@)?' +\n      '(?:'\n\n    let tld = '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))'\n\n    if (allowLocal) {\n      tld += '?'\n    } else {\n      regexp +=\n        // IP address exclusion\n        // private & local networks\n        '(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})' +\n        '(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})' +\n        '(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})'\n    }\n\n    regexp +=\n      // IP address dotted notation octets\n      // excludes loopback network 0.0.0.0\n      // excludes reserved space >= 224.0.0.0\n      // excludes network & broacast addresses\n      // (first & last IP address of each class)\n      '(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])' +\n      '(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}' +\n      '(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))' +\n      '|' +\n      // host name\n      '(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)' +\n      // domain name\n      '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*' +\n      tld +\n      ')' +\n      // port number\n      '(?::\\\\d{2,5})?' +\n      // resource path\n      '(?:[/?#]\\\\S*)?' +\n      '$'\n\n    return new RegExp(regexp, 'i')\n  }\n}\n","import REGEXP from './regexp'\n\n// If the given argument is a call: function the and: function return the value otherwise just return the value. Additional arguments will be passed as arguments to the function.\n// Example:\n// ```\n// result('foo') // 'foo'\n// result(Math.max, 1, 2) // 2\n// ```\nexport const result = (value, ...args) =>\n  isFunction(value) ? value.apply(null, args) : value\n\n// Checks if the value is a number. This function does not consider NaN a number like many other `isNumber` functions do.\nexport const isNumber = value => typeof value === 'number' && !isNaN(value)\n\n// Returns false if the object is not a function\nexport const isFunction = value => typeof value === 'function'\n\n// A simple check to verify that the value is an integer. Uses `isNumber` and a simple modulo check.\nexport const isInteger = value => isNumber(value) && value % 1 === 0\n\n// A simple check to verify that the value is a float. Uses `isNumber` and 'isInteger' functions\nexport const isFloat = value => isNumber(value) && !isInteger(value)\n\n// Checks if the value is a boolean\nexport const isBoolean = value => typeof value === 'boolean'\n\n// Uses the `Object` function to check if the given argument is an object.\nexport const isObject = obj => obj === Object(obj)\n\n// Simply checks if the object is an instance of a date\nexport const isDate = obj => obj instanceof Date\n\n// Returns false if the object is `null` of `undefined`\nexport const isDefined = obj => obj !== null && obj !== undefined\n\n// Check if value is empty\nexport const isEmpty = value => {\n  // Null and undefined are empty\n  if (!isDefined(value)) return true\n\n  // functions are non empty\n  if (isFunction(value)) return false\n\n  // Whitespace only strings are empty\n  if (isString(value)) return REGEXP.EMPTY_STRING.test(value)\n\n  // For arrays we use the length property\n  if (isArray(value)) return value.length === 0\n\n  // Dates have no attributes but aren't empty\n  if (isDate(value)) return false\n\n  // If we find at least one property we consider it non empty\n  if (isObject(value)) {\n    for (const attr in value) {\n      return !attr\n    }\n    return true\n  }\n\n  return false\n}\n\n// Checks if value is a string\nexport const isString = value => typeof value === 'string'\n\n// Check if calue is an array\nexport const isArray = value => ({}.toString.call(value) === '[object Array]')\n\n// Checks if the object is a hash, which is equivalent to an object that is neither an array, a function nor a date.\nexport const isHash = value =>\n  isObject(value) && !isArray(value) && !isFunction(value) && !isDate(value)\n\n// checks if an object or an array contains a value\nexport const contains = (obj, value) => {\n  if (!isDefined(obj)) return false\n\n  if (isArray(obj)) return obj.indexOf(value) !== -1\n\n  return value in obj\n}\n\n// Removes duplicates in an array\nexport const unique = array => {\n  if (!isArray(array)) return array\n\n  return array.filter((el, index, array) => array.indexOf(el) === index)\n}\n\n// Capitalizes a string\nexport const capitalize = str => {\n  if (!isString(str)) return str\n\n  return str[0].toUpperCase() + str.slice(1)\n}\n\n// Formats the specified strings with the given values like so:\n// ```\n// format(\"Foo: %{foo}\", {foo: \"bar\"}) // \"Foo bar\"\n// ```\n// If you want to write %{...} without having it replaced simply prefix it with % like this `Foo: %%{foo}` and it will be returned as `\"Foo: %{foo}\"`\nexport const formatMessage = (str, vals) => {\n  if (!isString(str)) return str\n  return str.replace(REGEXP.FORMAT_REGEXP, (m0, m1, m2) => {\n    return m1 === '%' ? `%{${m2}}` : String(vals[m2])\n  })\n}\n\n// \"Prettifies\" the given string. Prettifying means replacing [.\\_-] with spaces as well as splitting camel case words.\nexport const prettify = str => {\n  // If there are more than 2 decimals round it to two\n  if (isNumber(str))\n    return (str * 100) % 1 === 0\n      ? `${str}`\n      : parseFloat(Math.round(str * 100) / 100).toFixed(2)\n\n  if (isArray(str)) return str.map(s => prettify(s)).join(', ')\n\n  if (isObject(str)) return str.toString()\n\n  return (\n    // Ensure the string is actually a string\n    `${str}`\n      // Splits keys separated by periods\n      .replace(/([^\\s])\\.([^\\s])/g, '$1 $2')\n      // Removes backslashes\n      .replace(/\\\\+/g, '')\n      // Replaces _ and - with space\n      .replace(/[_-]/g, ' ')\n      // Splits camel cased words\n      .replace(/([a-z])([A-Z])/g, (m0, m1, m2) => `${m1} ${m2.toLowerCase()}`)\n      .toLowerCase()\n  )\n}\n","import { formatMessage, isDefined, unique } from '../utils'\n\nexport const defaults = {\n  earlierThan: null,\n  laterThan: null,\n  dateOnly: false,\n  message: null,\n  notValid: 'must be a valid date (${value})',\n  dateOnlyMessage: 'must be a date (not a datetime)',\n  tooEarly: 'must be no earlier than %{date}',\n  tooLate: 'must be no later than %{date}',\n  formatMessage\n}\n\nexport default (value, options) => {\n  const {\n    earlierThan,\n    laterThan,\n    dateOnly,\n    dateOnlyMessage,\n    message,\n    notValid,\n    tooEarly,\n    tooLate,\n    formatMessage\n  } = {\n    ...defaults,\n    ...options\n  }\n\n  const istNotDefined = !isDefined(value)\n\n  // Empty values are fine\n  if (istNotDefined) return\n\n  const errors = []\n\n  // 86400000 is the number of milliseconds in a day, this is used to remove the time from the date\n  if (istNotDefined || isNaN(value) || (dateOnly && value % 86400000 !== 0))\n    return formatMessage(message || (dateOnly ? dateOnlyMessage : notValid), {\n      date: value\n    })\n\n  if (isDefined(earlierThan) && !isNaN(earlierThan) && value < earlierThan) {\n    errors.push(formatMessage(message || tooEarly, { date: earlierThan }))\n  }\n\n  if (isDefined(laterThan) && !isNaN(laterThan) && value > laterThan) {\n    errors.push(formatMessage(message || tooLate, { date: laterThan }))\n  }\n\n  if (errors.length) return unique(errors)\n}\n","import datetime from './datetime'\n\nexport default (value, options) =>\n  datetime(value, { ...options, dateOnly: true })\n","import { isDefined, isString } from '../utils'\n\nimport REGEXP from '../regexp'\n\nexport const defaults = {\n  message: 'is not a valid email',\n  pattern: REGEXP.EMAIL\n}\n\nexport default (value, options) => {\n  const { message, pattern } = { ...defaults, ...options }\n  const isNotDefined = !isDefined(value)\n\n  if (isNotDefined) return\n\n  if (isNotDefined || !isString(value) || !pattern.exec(value)) {\n    return message\n  }\n}\n","import { formatMessage, isEmpty, isString, prettify } from '../utils'\n\nexport const defaults = {\n  allowEmpty: false,\n  attribute: null,\n  comparator: (a, b) => a === b,\n  message: 'is not equal to %{attribute}',\n  formatMessage\n}\n\nexport default (value, options) => {\n  if (isString(options)) {\n    options = { attribute: options }\n  }\n\n  const { allowEmpty, attribute, comparator, message, formatMessage } = {\n    ...defaults,\n    ...options\n  }\n\n  if (isEmpty(attribute)) return\n\n  if (allowEmpty && isEmpty(value)) return\n\n  if (!comparator(value, attribute)) {\n    return formatMessage(message, {\n      attribute: prettify(attribute)\n    })\n  }\n}\n","import { contains, formatMessage, isArray, isDefined, isString } from '../utils'\n\nexport const defaults = {\n  message: '%{value} is restricted',\n  within: [],\n  formatMessage\n}\n\nexport default (value, options) => {\n  if (isArray(options)) {\n    options = { within: options }\n  }\n\n  const { within, message, formatMessage } = {\n    ...defaults,\n    ...options\n  }\n\n  // empty values are fine\n  if (!isDefined(value)) return\n\n  if (!contains(within, value)) return\n\n  if (isString(within[value])) {\n    value = within[value]\n  }\n\n  return formatMessage(message, { value })\n}\n","import { isDefined, isString } from '../utils'\n\nexport const defaults = {\n  message: 'format is invalid',\n  flags: null,\n  pattern: null\n}\n\nexport default (value, options) => {\n  if (!isDefined(options)) throw new Error('Missing format options!')\n\n  if (isString(options) || options instanceof RegExp) {\n    options = { pattern: options }\n  }\n\n  // Merge defaults and options\n  const { message, flags, pattern } = {\n    ...defaults,\n    ...options\n  }\n\n  // empty values are allowed\n  if (!isDefined(value)) return\n\n  if (!isString(value)) return message\n\n  const pttrn = isString(pattern) ? new RegExp(pattern, flags) : pattern\n\n  if (!pttrn.test(value)) {\n    return message\n  }\n}\n","import { contains, formatMessage, isArray, isDefined } from '../utils'\n\nexport const defaults = {\n  message: '\"%{value}\" is not included in the list',\n  within: [],\n  formatMessage\n}\n\nexport default (value, options) => {\n  if (isArray(options)) {\n    options = { within: options }\n  }\n\n  const { message, within, formatMessage } = {\n    ...defaults,\n    ...options\n  }\n\n  // When empty values are fine\n  if (!isDefined(value)) return\n\n  // When is contained\n  if (contains(within, value)) return\n\n  return formatMessage(message, { value })\n}\n","import { formatMessage, isDefined, isNumber } from '../utils'\n\nexport const defaults = {\n  is: null,\n  maximum: null,\n  minimum: null,\n  notValid: 'has an incorrect length',\n  wrongLength: 'is the wrong length (should be %{is} characters)',\n  tooShort: 'is too short (minimum is %{minimum} characters)',\n  tooLong: 'is too long (maximum is %{maximum} characters)',\n  tokenizer: value => value,\n  formatMessage\n}\n\nexport default (value, options) => {\n  const {\n    is,\n    maximum,\n    message,\n    minimum,\n    notValid,\n    tokenizer,\n    tooLong,\n    tooShort,\n    wrongLength,\n    formatMessage\n  } = { ...defaults, ...options }\n\n  // Empty values are allowed\n  if (!isDefined(value)) return\n\n  const errors = []\n\n  const length = tokenizer(value).length\n\n  if (!isNumber(length)) return notValid\n\n  // Exact (is) check\n  if (isNumber(is) && length !== is) {\n    errors.push(formatMessage(wrongLength, { is }))\n  }\n\n  // Minimum check\n  if (isNumber(minimum) && length < minimum) {\n    errors.push(formatMessage(tooShort, { minimum }))\n  }\n\n  // Maximum check\n  if (isNumber(maximum) && length > maximum) {\n    errors.push(formatMessage(tooLong, { maximum }))\n  }\n\n  if (errors.length > 0) return message || errors\n}\n","import {\n  capitalize,\n  isDefined,\n  isEmpty,\n  formatMessage,\n  isInteger,\n  isNumber,\n  isString,\n  prettify\n} from '../utils'\n\nexport const defaults = {\n  strict: false,\n  onlyInteger: false,\n  odd: false,\n  even: false,\n  message: null,\n  noStrings: false,\n  notValid: 'must be a valid number',\n  notNumber: 'is not a number',\n  notInteger: 'must be an integer',\n  notOdd: 'must be an odd number',\n  notEven: 'must be an even number',\n  mustBe: 'must be %{type} %{count}',\n  notGreaterThan: 'must be greater than %{count}',\n  notGreaterThanOrEqualTo: 'must be greater than or equal to %{count}',\n  notEqualTo: 'must be equal to %{count}',\n  notLessThan: 'must be less than %{count}',\n  notLessThanOrEqualTo: 'must be less than or equal to %{count}',\n  notDivisibleBy: 'must be divisible by %{count}',\n  formatMessage\n}\n\nconst checks = {\n  greaterThan: (v, c) => v > c,\n  greaterThanOrEqualTo: (v, c) => v >= c,\n  equalTo: (v, c) => v === c,\n  lessThan: (v, c) => v < c,\n  lessThanOrEqualTo: (v, c) => v <= c,\n  divisibleBy: (v, c) => v % c === 0\n}\n\nexport default (value, options) => {\n  const errors = []\n\n  const {\n    strict,\n    onlyInteger,\n    odd,\n    even,\n    formatMessage,\n    message,\n    mustBe,\n    noStrings,\n    notEven,\n    notOdd,\n    notInteger,\n    notNumber,\n    notValid\n  } = { ...defaults, ...options }\n\n  // If empty values are fine\n  if (!isDefined(value)) return\n\n  // Strict will check that it is a valid looking number\n  if (isString(value) && strict) {\n    const pattern = `^-?(0|[1-9]\\\\d*)${onlyInteger ? '' : '(\\\\.\\\\d+)?'}$`\n\n    if (!new RegExp(pattern).test(value)) {\n      return message || notNumber\n    }\n  }\n\n  // Coerce the value to a number unless we're being strict.\n  if (noStrings !== true && isString(value) && !isEmpty(value)) {\n    value = +value\n  }\n\n  // If it's not a number we shouldn't continue since it will compare it.\n  if (!isNumber(value)) return message || notValid\n\n  if (!options) return\n\n  // Same logic as above, sort of. Don't bother with comparisons if this\n  // doesn't pass.\n  if (onlyInteger && !isInteger(value)) return message || notInteger\n\n  for (const checkName of Object.keys(checks)) {\n    const count = options[checkName]\n    if (isNumber(count) && !checks[checkName](value, count)) {\n      // This picks the default message if specified\n      // For example the greaterThan check uses the message from\n      // this.notGreaterThan so we capitalize the name and prepend \"not\"\n      const key = 'not' + capitalize(checkName)\n      const msg = options[key] || mustBe\n\n      errors.push(\n        formatMessage(msg, {\n          count: count,\n          type: prettify(checkName)\n        })\n      )\n    }\n  }\n\n  if (odd && value % 2 !== 1) {\n    errors.push(notOdd)\n  }\n\n  if (even && value % 2 !== 0) {\n    errors.push(notEven)\n  }\n\n  if (errors.length) return message || errors\n}\n","import { isDefined, isEmpty } from '../utils'\n\nexport const defaults = {\n  allowEmpty: false,\n  message: \"can't be blank\"\n}\n\n// Presence validates that the value isn't empty\nexport default (value, options) => {\n  const { allowEmpty, message } = { ...defaults, ...options }\n\n  if (allowEmpty !== false ? !isDefined(value) : isEmpty(value)) {\n    return message\n  }\n}\n","import {\n  formatMessage,\n  isArray,\n  isBoolean,\n  isDate,\n  isDefined,\n  isFloat,\n  isFunction,\n  isHash,\n  isInteger,\n  isNumber,\n  isString\n} from '../utils'\n\nexport const defaults = {\n  message: 'must be of type %{type}',\n  formatMessage,\n  type: null\n}\n\nexport default (value, options) => {\n  if (isString(options)) {\n    options = { type: options }\n  }\n\n  const { message, type } = { ...defaults, ...options }\n\n  if (!isDefined(type)) throw new Error('No type was specified')\n\n  if (!isDefined(value)) return\n\n  const types = {\n    array: isArray,\n    boolean: isBoolean,\n    date: isDate,\n    float: isFloat,\n    function: isFunction,\n    integer: isInteger,\n    number: isNumber,\n    object: value => isHash(value),\n    string: isString\n  }\n\n  const check = isFunction(type) ? type : types[type]\n\n  if (!isFunction(check)) throw new Error(`${type} must be a function.`)\n\n  if (!check(value, options)) {\n    const msg = isFunction(message)\n      ? message(value, options)\n      : isFunction(type)\n        ? 'must be of the correct type'\n        : message\n\n    return formatMessage(msg, {\n      type\n    })\n  }\n}\n","import { isDefined, isString } from '../utils'\nimport REGEXP from '../regexp'\n\nexport const defaults = {\n  allowLocal: false,\n  message: 'is not a valid url',\n  schemes: ['http', 'https']\n}\n\n// A URL validator that is used to validate URLs with the ability to\n// restrict schemes and some domains.\nexport default (value, options) => {\n  const { allowLocal, message, schemes } = {\n    ...defaults,\n    ...options\n  }\n\n  if (!isDefined(value)) return\n\n  if (!isString(value)) return message\n\n  if (!REGEXP.URL({ allowLocal, schemes }).exec(value)) {\n    return message\n  }\n}\n","import date from './date'\nimport datetime from './datetime'\nimport email from './email'\nimport equality from './equality'\nimport exclusion from './exclusion'\nimport format from './format'\nimport inclusion from './inclusion'\nimport length from './length'\nimport numericality from './numericality'\nimport presence from './presence'\nimport type from './type'\nimport url from './url'\n\nexport default {\n  date,\n  datetime,\n  email,\n  equality,\n  exclusion,\n  format,\n  inclusion,\n  length,\n  numericality,\n  presence,\n  type,\n  url\n}\n","import validators from './validators/index'\nimport { isArray, isDefined, isFunction } from './utils'\n\n// Runs the validators specified by the constraints object:\n// - If validation fails, it will return an array with the errors.\n// - Otherwise it will return undefined\nexport default (value, constraints) => {\n  const results = []\n\n  if (!isDefined(constraints)) return\n\n  // Loops through each constraints, finds the correct validator and run it.\n  for (const constraint in constraints) {\n    const validator = validators[constraint]\n\n    if (!isFunction(validator))\n      throw new Error(`Unknow validator \"${validator}\"`)\n\n    const result = validator(value, constraints[constraint])\n\n    if (result) {\n      results.push(isArray(result) ? [...result] : result)\n    }\n  }\n\n  if (results.length) return results\n}\n"],"names":["allowLocal","schemes","regexp","join","tld","RegExp","isNumber","value","isNaN","isFunction","isInteger","isFloat","isBoolean","isObject","obj","Object","isDate","Date","isDefined","undefined","isEmpty","isString","REGEXP","EMPTY_STRING","test","isArray","length","attr","toString","call","isHash","contains","indexOf","unique","array","filter","el","index","capitalize","str","toUpperCase","slice","formatMessage","vals","replace","FORMAT_REGEXP","m0","m1","m2","String","prettify","parseFloat","Math","round","toFixed","map","s","toLowerCase","defaults","options","earlierThan","laterThan","dateOnly","dateOnlyMessage","message","notValid","tooEarly","tooLate","istNotDefined","errors","push","datetime","EMAIL","pattern","isNotDefined","exec","a","b","allowEmpty","attribute","comparator","within","Error","flags","pttrn","is","maximum","minimum","tokenizer","tooLong","tooShort","wrongLength","checks","v","c","strict","onlyInteger","odd","even","mustBe","noStrings","notEven","notOdd","notInteger","notNumber","keys","checkName","count","key","msg","type","types","check","URL","constraints","results","constraint","validator","validators","result"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,aAAe;gBACC,OADD;SAGN,+aAHM;;iBAKE,mBALF;YAOH,qCAPG;OASR,mBAA6B;QAA1BA,UAA0B,QAA1BA,UAA0B;QAAdC,OAAc,QAAdA,OAAc;QAC5BC,SACF;YAAA,GAGAD,QAAQE,IAAR,CAAa,GAAb,CAHA,GAIA,OAJA;0BAAA,GAOA,KARF;QAUIC,MAAM,qCAAV;;QAEIJ,UAAJ,EAAgB;aACP,GAAP;KADF,MAEO;;;2CAKH,+CADA,GAEA,oDALF;;;;;;;;+CAeA,4CADA,GAEA,gDAFA,GAGA,GAHA;gEAAA;oEAAA,GAQAI,GARA,GASA,GATA;oBAAA;oBAAA,GAcA,GApBF;WAsBO,IAAIC,MAAJ,CAAWH,MAAX,EAAmB,GAAnB,CAAP;;CAvDJ;;ACYO,IAAMI,WAAW,SAAXA,QAAW;SAAS,OAAOC,KAAP,KAAiB,QAAjB,IAA6B,CAACC,MAAMD,KAAN,CAAvC;CAAjB;;AAGP,AAAO,IAAME,aAAa,SAAbA,UAAa;SAAS,OAAOF,KAAP,KAAiB,UAA1B;CAAnB;;AAGP,AAAO,IAAMG,YAAY,SAAZA,SAAY;SAASJ,SAASC,KAAT,KAAmBA,QAAQ,CAAR,KAAc,CAA1C;CAAlB;;AAGP,AAAO,IAAMI,UAAU,SAAVA,OAAU;SAASL,SAASC,KAAT,KAAmB,CAACG,UAAUH,KAAV,CAA7B;CAAhB;;AAGP,AAAO,IAAMK,YAAY,SAAZA,SAAY;SAAS,OAAOL,KAAP,KAAiB,SAA1B;CAAlB;;AAGP,AAAO,IAAMM,WAAW,SAAXA,QAAW;SAAOC,QAAQC,OAAOD,GAAP,CAAf;CAAjB;;AAGP,AAAO,IAAME,SAAS,SAATA,MAAS;SAAOF,eAAeG,IAAtB;CAAf;;AAGP,AAAO,IAAMC,YAAY,SAAZA,SAAY;SAAOJ,QAAQ,IAAR,IAAgBA,QAAQK,SAA/B;CAAlB;;AAGP,AAAO,IAAMC,UAAU,SAAVA,OAAU,QAAS;;MAE1B,CAACF,UAAUX,KAAV,CAAL,EAAuB,OAAO,IAAP,CAFO;;MAK1BE,WAAWF,KAAX,CAAJ,EAAuB,OAAO,KAAP,CALO;;MAQ1Bc,SAASd,KAAT,CAAJ,EAAqB,OAAOe,OAAOC,YAAP,CAAoBC,IAApB,CAAyBjB,KAAzB,CAAP,CARS;;MAW1BkB,QAAQlB,KAAR,CAAJ,EAAoB,OAAOA,MAAMmB,MAAN,KAAiB,CAAxB,CAXU;;MAc1BV,OAAOT,KAAP,CAAJ,EAAmB,OAAO,KAAP,CAdW;;MAiB1BM,SAASN,KAAT,CAAJ,EAAqB;SACd,IAAMoB,IAAX,IAAmBpB,KAAnB,EAA0B;aACjB,CAACoB,IAAR;;;WAEK,IAAP;;;SAGK,KAAP;CAxBK;;AA4BP,AAAO,IAAMN,WAAW,SAAXA,QAAW;SAAS,OAAOd,KAAP,KAAiB,QAA1B;CAAjB;;AAGP,AAAO,IAAMkB,UAAU,SAAVA,OAAU;SAAU,GAAGG,QAAH,CAAYC,IAAZ,CAAiBtB,KAAjB,MAA4B,gBAAtC;CAAhB;;AAGP,AAAO,IAAMuB,SAAS,SAATA,MAAS;SACpBjB,SAASN,KAAT,KAAmB,CAACkB,QAAQlB,KAAR,CAApB,IAAsC,CAACE,WAAWF,KAAX,CAAvC,IAA4D,CAACS,OAAOT,KAAP,CADzC;CAAf;;AAIP,AAAO,IAAMwB,WAAW,SAAXA,QAAW,CAACjB,GAAD,EAAMP,KAAN,EAAgB;MAClC,CAACW,UAAUJ,GAAV,CAAL,EAAqB,OAAO,KAAP;MAEjBW,QAAQX,GAAR,CAAJ,EAAkB,OAAOA,IAAIkB,OAAJ,CAAYzB,KAAZ,MAAuB,CAAC,CAA/B;SAEXA,SAASO,GAAhB;CALK;;AASP,AAAO,IAAMmB,SAAS,SAATA,MAAS,QAAS;MACzB,CAACR,QAAQS,KAAR,CAAL,EAAqB,OAAOA,KAAP;SAEdA,MAAMC,MAAN,CAAa,UAACC,EAAD,EAAKC,KAAL,EAAYH,KAAZ;WAAsBA,MAAMF,OAAN,CAAcI,EAAd,MAAsBC,KAA5C;GAAb,CAAP;CAHK;;AAOP,AAAO,IAAMC,aAAa,SAAbA,UAAa,MAAO;MAC3B,CAACjB,SAASkB,GAAT,CAAL,EAAoB,OAAOA,GAAP;SAEbA,IAAI,CAAJ,EAAOC,WAAP,KAAuBD,IAAIE,KAAJ,CAAU,CAAV,CAA9B;CAHK;;;;;;AAWP,AAAO,IAAMC,gBAAgB,SAAhBA,aAAgB,CAACH,GAAD,EAAMI,IAAN,EAAe;MACtC,CAACtB,SAASkB,GAAT,CAAL,EAAoB,OAAOA,GAAP;SACbA,IAAIK,OAAJ,CAAYtB,OAAOuB,aAAnB,EAAkC,UAACC,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAgB;WAChDD,OAAO,GAAP,eAAkBC,EAAlB,SAA0BC,OAAON,KAAKK,EAAL,CAAP,CAAjC;GADK,CAAP;CAFK;;AAQP,AAAO,IAAME,WAAW,SAAXA,QAAW,MAAO;;MAEzB5C,SAASiC,GAAT,CAAJ,EACE,OAAQA,MAAM,GAAP,GAAc,CAAd,KAAoB,CAApB,aACAA,GADA,IAEHY,WAAWC,KAAKC,KAAL,CAAWd,MAAM,GAAjB,IAAwB,GAAnC,EAAwCe,OAAxC,CAAgD,CAAhD,CAFJ;MAIE7B,QAAQc,GAAR,CAAJ,EAAkB,OAAOA,IAAIgB,GAAJ,CAAQ;WAAKL,SAASM,CAAT,CAAL;GAAR,EAA0BrD,IAA1B,CAA+B,IAA/B,CAAP;MAEdU,SAAS0B,GAAT,CAAJ,EAAmB,OAAOA,IAAIX,QAAJ,EAAP;;cAIdW,GAAH;KAEGK,OAFH,CAEW,mBAFX,EAEgC,OAFhC;KAIGA,OAJH,CAIW,MAJX,EAImB,EAJnB;KAMGA,OANH,CAMW,OANX,EAMoB,GANpB;KAQGA,OARH,CAQW,iBARX,EAQ8B,UAACE,EAAD,EAAKC,EAAL,EAASC,EAAT;uBAAmBD,EAAnB,cAAyBC,GAAGS,WAAH,EAAzB;KAR9B,EASGA,WATH;;CAbG;;AC3GA,IAAMC,WAAW;eACT,IADS;aAEX,IAFW;YAGZ,KAHY;WAIb,IAJa;YAKZ,iCALY;mBAML,iCANK;YAOZ,iCAPY;WAQb,+BARa;;CAAjB;AAYP,gBAAe,UAACnD,KAAD,EAAQoD,OAAR,EAAoB;4CAY5BD,QAZ4B,EAa5BC,OAb4B;MAE/BC,WAF+B,qBAE/BA,WAF+B;MAG/BC,SAH+B,qBAG/BA,SAH+B;MAI/BC,QAJ+B,qBAI/BA,QAJ+B;MAK/BC,eAL+B,qBAK/BA,eAL+B;MAM/BC,OAN+B,qBAM/BA,OAN+B;MAO/BC,QAP+B,qBAO/BA,QAP+B;MAQ/BC,QAR+B,qBAQ/BA,QAR+B;MAS/BC,OAT+B,qBAS/BA,OAT+B;MAU/BzB,gBAV+B,qBAU/BA,aAV+B;;MAgB3B0B,gBAAgB,CAAClD,UAAUX,KAAV,CAAvB,CAhBiC;;MAmB7B6D,aAAJ,EAAmB;MAEbC,SAAS,EAAf,CArBiC;;MAwB7BD,iBAAiB5D,MAAMD,KAAN,CAAjB,IAAkCuD,YAAYvD,QAAQ,QAAR,KAAqB,CAAvE,EACE,OAAOmC,iBAAcsB,YAAYF,WAAWC,eAAX,GAA6BE,QAAzC,CAAd,EAAkE;UACjE1D;GADD,CAAP;;MAIEW,UAAU0C,WAAV,KAA0B,CAACpD,MAAMoD,WAAN,CAA3B,IAAiDrD,QAAQqD,WAA7D,EAA0E;WACjEU,IAAP,CAAY5B,iBAAcsB,WAAWE,QAAzB,EAAmC;YAAQN;KAA3C,CAAZ;;;MAGE1C,UAAU2C,SAAV,KAAwB,CAACrD,MAAMqD,SAAN,CAAzB,IAA6CtD,QAAQsD,SAAzD,EAAoE;WAC3DS,IAAP,CAAY5B,iBAAcsB,WAAWG,OAAzB,EAAkC;YAAQN;KAA1C,CAAZ;;;MAGEQ,OAAO3C,MAAX,EAAmB,OAAOO,OAAOoC,MAAP,CAAP;CArCrB;;ACZA,YAAe,UAAC9D,KAAD,EAAQoD,OAAR;SACbY,SAAShE,KAAT,oBAAqBoD,OAArB;cAAwC;KAD3B;CAAf;;ACEO,IAAMD,aAAW;WACb,sBADa;WAEbpC,OAAOkD;CAFX;AAKP,aAAe,UAACjE,KAAD,EAAQoD,OAAR,EAAoB;4CACCD,UADD,EACcC,OADd;MACzBK,OADyB,qBACzBA,OADyB;MAChBS,OADgB,qBAChBA,OADgB;;MAE3BC,eAAe,CAACxD,UAAUX,KAAV,CAAtB;MAEImE,YAAJ,EAAkB;;MAEdA,gBAAgB,CAACrD,SAASd,KAAT,CAAjB,IAAoC,CAACkE,QAAQE,IAAR,CAAapE,KAAb,CAAzC,EAA8D;WACrDyD,OAAP;;CAPJ;;ACPO,IAAMN,aAAW;cACV,KADU;aAEX,IAFW;cAGV,oBAACkB,CAAD,EAAIC,CAAJ;WAAUD,MAAMC,CAAhB;GAHU;WAIb,8BAJa;;CAAjB;AAQP,gBAAe,UAACtE,KAAD,EAAQoD,OAAR,EAAoB;MAC7BtC,SAASsC,OAAT,CAAJ,EAAuB;cACX;iBAAaA;KAAvB;;;4CAIGD,UAN4B,EAO5BC,OAP4B;MAKzBmB,UALyB,qBAKzBA,UALyB;MAKbC,SALa,qBAKbA,SALa;MAKFC,UALE,qBAKFA,UALE;MAKUhB,OALV,qBAKUA,OALV;MAKmBtB,gBALnB,qBAKmBA,aALnB;;MAU7BtB,QAAQ2D,SAAR,CAAJ,EAAwB;MAEpBD,cAAc1D,QAAQb,KAAR,CAAlB,EAAkC;;MAE9B,CAACyE,WAAWzE,KAAX,EAAkBwE,SAAlB,CAAL,EAAmC;WAC1BrC,iBAAcsB,OAAd,EAAuB;iBACjBd,SAAS6B,SAAT;KADN,CAAP;;CAfJ;;ACRO,IAAMrB,aAAW;WACb,wBADa;UAEd,EAFc;;CAAjB;AAMP,iBAAe,UAACnD,KAAD,EAAQoD,OAAR,EAAoB;MAC7BlC,QAAQkC,OAAR,CAAJ,EAAsB;cACV;cAAUA;KAApB;;;4CAIGD,UAN4B,EAO5BC,OAP4B;MAKzBsB,MALyB,qBAKzBA,MALyB;MAKjBjB,OALiB,qBAKjBA,OALiB;MAKRtB,gBALQ,qBAKRA,aALQ;;;MAW7B,CAACxB,UAAUX,KAAV,CAAL,EAAuB;MAEnB,CAACwB,SAASkD,MAAT,EAAiB1E,KAAjB,CAAL,EAA8B;;MAE1Bc,SAAS4D,OAAO1E,KAAP,CAAT,CAAJ,EAA6B;YACnB0E,OAAO1E,KAAP,CAAR;;;SAGKmC,iBAAcsB,OAAd,EAAuB;;GAAvB,CAAP;CAnBF;;ACNO,IAAMN,aAAW;WACb,mBADa;SAEf,IAFe;WAGb;CAHJ;AAMP,cAAe,UAACnD,KAAD,EAAQoD,OAAR,EAAoB;MAC7B,CAACzC,UAAUyC,OAAV,CAAL,EAAyB,MAAM,IAAIuB,KAAJ,CAAU,yBAAV,CAAN;;MAErB7D,SAASsC,OAAT,KAAqBA,mBAAmBtD,MAA5C,EAAoD;cACxC;eAAWsD;KAArB;GAJ+B;;;4CAS5BD,UAT4B,EAU5BC,OAV4B;MAQzBK,OARyB,qBAQzBA,OARyB;MAQhBmB,KARgB,qBAQhBA,KARgB;MAQTV,OARS,qBAQTA,OARS;;;MAc7B,CAACvD,UAAUX,KAAV,CAAL,EAAuB;MAEnB,CAACc,SAASd,KAAT,CAAL,EAAsB,OAAOyD,OAAP;MAEhBoB,QAAQ/D,SAASoD,OAAT,IAAoB,IAAIpE,MAAJ,CAAWoE,OAAX,EAAoBU,KAApB,CAApB,GAAiDV,OAA/D;;MAEI,CAACW,MAAM5D,IAAN,CAAWjB,KAAX,CAAL,EAAwB;WACfyD,OAAP;;CArBJ;;ACNO,IAAMN,aAAW;WACb,wCADa;UAEd,EAFc;;CAAjB;AAMP,iBAAe,UAACnD,KAAD,EAAQoD,OAAR,EAAoB;MAC7BlC,QAAQkC,OAAR,CAAJ,EAAsB;cACV;cAAUA;KAApB;;;4CAIGD,UAN4B,EAO5BC,OAP4B;MAKzBK,OALyB,qBAKzBA,OALyB;MAKhBiB,MALgB,qBAKhBA,MALgB;MAKRvC,gBALQ,qBAKRA,aALQ;;;MAW7B,CAACxB,UAAUX,KAAV,CAAL,EAAuB,OAXU;;MAc7BwB,SAASkD,MAAT,EAAiB1E,KAAjB,CAAJ,EAA6B;SAEtBmC,iBAAcsB,OAAd,EAAuB;;GAAvB,CAAP;CAhBF;;ACNO,IAAMN,aAAW;MAClB,IADkB;WAEb,IAFa;WAGb,IAHa;YAIZ,yBAJY;eAKT,kDALS;YAMZ,iDANY;WAOb,gDAPa;aAQX;WAASnD,KAAT;GARW;;CAAjB;AAYP,cAAe,UAACA,KAAD,EAAQoD,OAAR,EAAoB;4CAYxBD,UAZwB,EAYXC,OAZW;MAE/B0B,EAF+B,qBAE/BA,EAF+B;MAG/BC,OAH+B,qBAG/BA,OAH+B;MAI/BtB,OAJ+B,qBAI/BA,OAJ+B;MAK/BuB,OAL+B,qBAK/BA,OAL+B;MAM/BtB,QAN+B,qBAM/BA,QAN+B;MAO/BuB,SAP+B,qBAO/BA,SAP+B;MAQ/BC,OAR+B,qBAQ/BA,OAR+B;MAS/BC,QAT+B,qBAS/BA,QAT+B;MAU/BC,WAV+B,qBAU/BA,WAV+B;MAW/BjD,gBAX+B,qBAW/BA,aAX+B;;;MAe7B,CAACxB,UAAUX,KAAV,CAAL,EAAuB;MAEjB8D,SAAS,EAAf;MAEM3C,SAAS8D,UAAUjF,KAAV,EAAiBmB,MAAhC;MAEI,CAACpB,SAASoB,MAAT,CAAL,EAAuB,OAAOuC,QAAP,CArBU;;MAwB7B3D,SAAS+E,EAAT,KAAgB3D,WAAW2D,EAA/B,EAAmC;WAC1Bf,IAAP,CAAY5B,iBAAciD,WAAd,EAA2B;;KAA3B,CAAZ;GAzB+B;;;MA6B7BrF,SAASiF,OAAT,KAAqB7D,SAAS6D,OAAlC,EAA2C;WAClCjB,IAAP,CAAY5B,iBAAcgD,QAAd,EAAwB;;KAAxB,CAAZ;GA9B+B;;;MAkC7BpF,SAASgF,OAAT,KAAqB5D,SAAS4D,OAAlC,EAA2C;WAClChB,IAAP,CAAY5B,iBAAc+C,OAAd,EAAuB;;KAAvB,CAAZ;;;MAGEpB,OAAO3C,MAAP,GAAgB,CAApB,EAAuB,OAAOsC,WAAWK,MAAlB;CAtCzB;;ACHO,IAAMX,aAAW;UACd,KADc;eAET,KAFS;OAGjB,KAHiB;QAIhB,KAJgB;WAKb,IALa;aAMX,KANW;YAOZ,wBAPY;aAQX,iBARW;cASV,oBATU;UAUd,uBAVc;WAWb,wBAXa;UAYd,0BAZc;kBAaN,+BAbM;2BAcG,2CAdH;cAeV,2BAfU;eAgBT,4BAhBS;wBAiBA,wCAjBA;kBAkBN,+BAlBM;;CAAjB;AAsBP,IAAMkC,SAAS;eACA,qBAACC,CAAD,EAAIC,CAAJ;WAAUD,IAAIC,CAAd;GADA;wBAES,8BAACD,CAAD,EAAIC,CAAJ;WAAUD,KAAKC,CAAf;GAFT;WAGJ,iBAACD,CAAD,EAAIC,CAAJ;WAAUD,MAAMC,CAAhB;GAHI;YAIH,kBAACD,CAAD,EAAIC,CAAJ;WAAUD,IAAIC,CAAd;GAJG;qBAKM,2BAACD,CAAD,EAAIC,CAAJ;WAAUD,KAAKC,CAAf;GALN;eAMA,qBAACD,CAAD,EAAIC,CAAJ;WAAUD,IAAIC,CAAJ,KAAU,CAApB;;CANf;AASA,oBAAe,UAACvF,KAAD,EAAQoD,OAAR,EAAoB;MAC3BU,SAAS,EAAf;;4CAgBSX,UAjBwB,EAiBXC,OAjBW;MAI/BoC,MAJ+B,qBAI/BA,MAJ+B;MAK/BC,WAL+B,qBAK/BA,WAL+B;MAM/BC,GAN+B,qBAM/BA,GAN+B;MAO/BC,IAP+B,qBAO/BA,IAP+B;MAQ/BxD,gBAR+B,qBAQ/BA,aAR+B;MAS/BsB,OAT+B,qBAS/BA,OAT+B;MAU/BmC,MAV+B,qBAU/BA,MAV+B;MAW/BC,SAX+B,qBAW/BA,SAX+B;MAY/BC,OAZ+B,qBAY/BA,OAZ+B;MAa/BC,MAb+B,qBAa/BA,MAb+B;MAc/BC,UAd+B,qBAc/BA,UAd+B;MAe/BC,SAf+B,qBAe/BA,SAf+B;MAgB/BvC,QAhB+B,qBAgB/BA,QAhB+B;;;MAoB7B,CAAC/C,UAAUX,KAAV,CAAL,EAAuB,OApBU;;MAuB7Bc,SAASd,KAAT,KAAmBwF,MAAvB,EAA+B;QACvBtB,oCAA6BuB,cAAc,EAAd,GAAmB,YAAhD,MAAN;;QAEI,CAAC,IAAI3F,MAAJ,CAAWoE,OAAX,EAAoBjD,IAApB,CAAyBjB,KAAzB,CAAL,EAAsC;aAC7ByD,WAAWwC,SAAlB;;GA3B6B;;;MAgC7BJ,cAAc,IAAd,IAAsB/E,SAASd,KAAT,CAAtB,IAAyC,CAACa,QAAQb,KAAR,CAA9C,EAA8D;YACpD,CAACA,KAAT;GAjC+B;;;MAqC7B,CAACD,SAASC,KAAT,CAAL,EAAsB,OAAOyD,WAAWC,QAAlB;MAElB,CAACN,OAAL,EAAc,OAvCmB;;;MA2C7BqC,eAAe,CAACtF,UAAUH,KAAV,CAApB,EAAsC,OAAOyD,WAAWuC,UAAlB;;aAEdxF,OAAO0F,IAAP,CAAYb,MAAZ,CA7CS;;2CA6CY;QAAlCc,oBAAN;QACGC,QAAQhD,QAAQ+C,SAAR,CAAd;;QACIpG,SAASqG,KAAT,KAAmB,CAACf,OAAOc,SAAP,EAAkBnG,KAAlB,EAAyBoG,KAAzB,CAAxB,EAAyD;;;;UAIjDC,MAAM,QAAQtE,WAAWoE,SAAX,CAApB;UACMG,MAAMlD,QAAQiD,GAAR,KAAgBT,MAA5B;aAEO7B,IAAP,CACE5B,iBAAcmE,GAAd,EAAmB;eACVF,KADU;cAEXzD,SAASwD,SAAT;OAFR,CADF;;;;MASAT,OAAO1F,QAAQ,CAAR,KAAc,CAAzB,EAA4B;WACnB+D,IAAP,CAAYgC,MAAZ;;;MAGEJ,QAAQ3F,QAAQ,CAAR,KAAc,CAA1B,EAA6B;WACpB+D,IAAP,CAAY+B,OAAZ;;;MAGEhC,OAAO3C,MAAX,EAAmB,OAAOsC,WAAWK,MAAlB;CAvErB;;ACxCO,IAAMX,aAAW;cACV,KADU;WAEb,gBAFa;;CAAjB;AAMP,gBAAe,UAACnD,KAAD,EAAQoD,OAAR,EAAoB;4CACID,UADJ,EACiBC,OADjB;MACzBmB,UADyB,qBACzBA,UADyB;MACbd,OADa,qBACbA,OADa;;MAG7Bc,eAAe,KAAf,GAAuB,CAAC5D,UAAUX,KAAV,CAAxB,GAA2Ca,QAAQb,KAAR,CAA/C,EAA+D;WACtDyD,OAAP;;CAJJ;;ACMO,IAAMN,aAAW;WACb,yBADa;8BAAA;QAGhB;CAHD;AAMP,YAAe,UAACnD,KAAD,EAAQoD,OAAR,EAAoB;MAC7BtC,SAASsC,OAAT,CAAJ,EAAuB;cACX;YAAQA;KAAlB;;;4CAG6BD,UALE,EAKWC,OALX;MAKzBK,OALyB,qBAKzBA,OALyB;MAKhB8C,IALgB,qBAKhBA,IALgB;;MAO7B,CAAC5F,UAAU4F,IAAV,CAAL,EAAsB,MAAM,IAAI5B,KAAJ,CAAU,uBAAV,CAAN;MAElB,CAAChE,UAAUX,KAAV,CAAL,EAAuB;MAEjBwG,QAAQ;WACLtF,OADK;aAEHb,SAFG;UAGNI,MAHM;WAILL,OAJK;cAKFF,UALE;aAMHC,SANG;YAOJJ,QAPI;YAQJ;aAASwB,OAAOvB,KAAP,CAAT;KARI;YASJc;GATV;MAYM2F,QAAQvG,WAAWqG,IAAX,IAAmBA,IAAnB,GAA0BC,MAAMD,IAAN,CAAxC;MAEI,CAACrG,WAAWuG,KAAX,CAAL,EAAwB,MAAM,IAAI9B,KAAJ,WAAa4B,IAAb,0BAAN;;MAEpB,CAACE,MAAMzG,KAAN,EAAaoD,OAAb,CAAL,EAA4B;QACpBkD,MAAMpG,WAAWuD,OAAX,IACRA,QAAQzD,KAAR,EAAeoD,OAAf,CADQ,GAERlD,WAAWqG,IAAX,IACE,6BADF,GAEE9C,OAJN;WAMOtB,cAAcmE,GAAd,EAAmB;;KAAnB,CAAP;;CAlCJ;;ACjBO,IAAMnD,aAAW;cACV,KADU;WAEb,oBAFa;WAGb,CAAC,MAAD,EAAS,OAAT,CAHa;;;CAAjB;AAQP,WAAe,UAACnD,KAAD,EAAQoD,OAAR,EAAoB;4CAE5BD,UAF4B,EAG5BC,OAH4B;MACzB3D,UADyB,qBACzBA,UADyB;MACbgE,OADa,qBACbA,OADa;MACJ/D,OADI,qBACJA,OADI;;MAM7B,CAACiB,UAAUX,KAAV,CAAL,EAAuB;MAEnB,CAACc,SAASd,KAAT,CAAL,EAAsB,OAAOyD,OAAP;;MAElB,CAAC1C,OAAO2F,GAAP,CAAW;0BAAA;;GAAX,EAAoCtC,IAApC,CAAyCpE,KAAzC,CAAL,EAAsD;WAC7CyD,OAAP;;CAXJ;;ACEA,iBAAe;YAAA;oBAAA;cAAA;oBAAA;sBAAA;gBAAA;sBAAA;gBAAA;4BAAA;oBAAA;YAAA;;CAAf;;ACTA;;;AAEA,gBAAe,UAACzD,KAAD,EAAQ2G,WAAR,EAAwB;MAC/BC,UAAU,EAAhB;MAEI,CAACjG,UAAUgG,WAAV,CAAL,EAA6B,OAHQ;;OAMhC,IAAME,UAAX,IAAyBF,WAAzB,EAAsC;QAC9BG,YAAYC,WAAWF,UAAX,CAAlB;QAEI,CAAC3G,WAAW4G,SAAX,CAAL,EACE,MAAM,IAAInC,KAAJ,8BAA+BmC,SAA/B,QAAN;QAEIE,YAASF,UAAU9G,KAAV,EAAiB2G,YAAYE,UAAZ,CAAjB,CAAf;;QAEIG,SAAJ,EAAY;cACFjD,IAAR,CAAa7C,QAAQ8F,SAAR,uBAAsBA,SAAtB,IAAgCA,SAA7C;;;;MAIAJ,QAAQzF,MAAZ,EAAoB,OAAOyF,OAAP;CAnBtB;;;;"}